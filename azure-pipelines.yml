#TODO:
  # pr:
  #   branches:
  #     include:
  #       - dev
  #   paths:
  #     exclude:
  #       - docs/*
  #       - README.md
  
  # trigger:
  #  branches:
  #    include:
  #      - master
  #  paths:
  #    exclude:
  #      - docs/*
  #      - README.md
  #      - azure-pipelines-ci.yml
  #      - azure-pipelines-ci-cd.yml
trigger:
- '*'
# - master

pool:
  vmImage: 'windows-latest'

  variables:
    buildConfiguration: 'Release'
  
  stages:
  - stage: 'Build'
    displayName: 'Build the web application'
    jobs: 
    - job: 'Build' 
      displayName: 'Build job'
      pool:
        vmImage: 'windows-latest'
      variables:
        solution: '**/*.sln'
        buildPlatform: 'Any CPU'
      steps:
        #Build
        ##TODO: SonarCloud
        steps:
          - task: DotNetCoreCLI@2
            displayName: 'Restore project dependencies'
            inputs:
              command: 'restore'
              projects: 'AzureDevOps2020.Web/*.csproj'
          
          - task: DotNetCoreCLI@2
            displayName: 'Build the project - $(buildConfiguration)' 
            inputs:
              command: 'build'
              arguments: '--no-restore --configuration $(buildConfiguration)' 
              projects: 'AzureDevOps2020.Web/*.csproj'
          
          - task: DotNetCoreCLI@2
            displayName: 'Publish the project - $(buildConfiguration)' 
            inputs:
              command: 'publish'
              projects: 'AzureDevOps2020.Web/*.csproj'
              publishWebProjects: false
              arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)' 
              zipAfterPublish: true
          
          - publish: '$(Build.ArtifactStagingDirectory)'
            artifact: drop         

        #Test
        # - task: VSTest@2
        #   inputs:
        #     platform: '$(buildPlatform)'
        #     configuration: '$(buildConfiguration)'
        # - task: DotNetCoreCLI@2
        #   displayName: 'Run unit tests - $(buildConfiguration)'
        #   inputs:
        #     command: 'test'
        #     arguments: '--no-build --configuration $(buildConfiguration)'
        #     publishTestResults: true
        #     projects: '**/*.Tests.csproj'
        # - task: WhiteSource Bolt@20
        #   displayName: 'Run WhiteSource Bolt' 
        #   condition: |
        #     and
        #       (
        #         succeeded(),
        #         eq(variables['Build.Reason'], 'PullRequest'),
        #         eq(variables['System.PullRequest.TargetBranch'], 'master')
        #       )
